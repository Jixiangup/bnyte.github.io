<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Golang-keep_it_up</title>
    <url>/2022/12/05/Golang-keep-it-up/</url>
    <content><![CDATA[<p>本文主要连载自己的<code>Golang</code>学习笔记以及自己遇到的一些坑或者说自己的感悟吧, 这是一个漫长的过程, 如同标题一样 <code>keep it up gogogo....</code></p>
<span id="more"></span>

<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><blockquote>
<p>其实本来不打算写这个引言 既然是 blog 还是写写吧 并不是笔记项目哈哈哈，学这个就是最近学完了<code>python</code>然后想再继续学点吧, 毕竟都说它是<code>Google</code>开源的未来趋势，毕竟<code>k8s</code>, <code>docker</code>等前沿或者应用较为广泛的技术都被应用上了, 而我还在守着<code>Java</code>的一亩三分地自顾自的说着<code>Java No.1</code>倒是有些顽固不化了，说那么多，就不说了 开始吧！！！！</p>
</blockquote>
<blockquote>
<p>本文主要素材内容来源于网络,主要采取<a href="https://go.dev/">Golang 官方文档</a>, 如果引用了其他帮助请见下文的<a href="#%E9%B8%A3%E8%B0%A2">鸣谢</a>，如果我标记错了出处或者对您的版权产生了侵犯，请您谅解我并非有意，这并非一个<code>商用博客</code>，同时您如果对此有任何不满请与<a href="/about">我</a>取得联系, 我将以最快的时间之内对您进行处理，因为我需要工作所以希望您能够耐心的等待。</p>
</blockquote>
<h1 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="选择-IDE"><a href="#选择-IDE" class="headerlink" title="选择 IDE"></a>选择 IDE</h3><p>我是使用的<a href="https://www.jetbrains.com/">JetBrains</a>公司产出的<code>GoLand</code>进行开发，如果你期望使用<a href="https://code.visualstudio.com/">VsCode</a>你可以自行获取解决、集成方案。</p>
<h3 id="安装-Golang"><a href="#安装-Golang" class="headerlink" title="安装 Golang"></a>安装 Golang</h3><p>在<a href="https://go.dev/dl/">Golang 官方下载</a>页下载适合自己系统适用的环境版本, 并且打开直接下一步安装即可。</p>
<p>配置环境变量以及简单创建文件的配置就忽略了…</p>
<h3 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h3><p>创建空文件夹使用<code>goland</code>打开，或者直接在<code>goland</code>中创建工程.</p>
<ul>
<li><p>在项目根目录创建文件<code>go.mod</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 模块名可以直接与工程名相同</span><br><span class="line">module helloworld</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建 main.go 文件</p>
</li>
<li><p>编写<code>main</code>函数</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 没个项目都必须要有一个，并且如果期望运行必须引入且方法中必须包含`main`函数</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="语法介绍"><a href="#语法介绍" class="headerlink" title="语法介绍"></a>语法介绍</h2><h3 id="创建函数"><a href="#创建函数" class="headerlink" title="创建函数"></a>创建函数</h3><ul>
<li><p>语法</p>
<p>主意：当返回值为<code>void</code>时直接缺省。</p>
<blockquote>
<p>func {FUNC_NAME}({NAME} {TYPE}, …. {NAME} {TYPE}) {RESULT_TYPE} { code block… }</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(pre <span class="type">int</span>, next <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> pre + next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="创建变量"><a href="#创建变量" class="headerlink" title="创建变量"></a>创建变量</h3><ul>
<li><p>指定变量类型，如果没有初始化，则变量默认为零值</p>
<blockquote>
<p>var {field_name} {field_type}</p>
<p>{field_name} &#x3D; {field_value}</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&quot;猪猪侠&quot;</span></span><br><span class="line">  fmt.Println(<span class="string">&quot;用户名是:&quot;</span>, name) <span class="comment">// 猪猪侠</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> b <span class="type">int</span></span><br><span class="line">  fmt.Println(<span class="string">&quot;没有初始化值的b:&quot;</span>, b) <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> c <span class="type">bool</span></span><br><span class="line">  fmt.Println(<span class="string">&quot;没有初始化值的c&quot;</span>, <span class="literal">false</span>) <span class="comment">// boolean类型默认为false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>隐式生命语法糖</p>
<p>主意：无法使用在已经使用<code>var</code>声明过的属性上</p>
<blockquote>
<p>{field_name} :&#x3D; {field_value}</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 等价 var number int = 1</span></span><br><span class="line">number := <span class="number">1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>多变量声明</p>
<blockquote>
<p>类型相同的多个变量，非全局变量</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 等价于 name00, name01 := 1, 2</span></span><br><span class="line"><span class="keyword">var</span> name00, name01 <span class="type">int</span> = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这种因式分解关键字的写法一般用于声明全局变量</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    vname1 v_type1</span><br><span class="line">    vname2 v_type2</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
</ul>
<!-- arr1 := [...]int{1, 2, 3} -->

<ul>
<li><p>总结</p>
<p>当函数、属性名的首字母大写时，则该实例会被导出(如 Java 中的<code>public</code>)</p>
</li>
</ul>
<h2 id="本地多模块"><a href="#本地多模块" class="headerlink" title="本地多模块"></a>本地多模块</h2><ul>
<li>创建模块</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go mod init bnyte.com/hello</span><br></pre></td></tr></table></figure>

<ul>
<li>指定查找依赖项</li>
</ul>
<blockquote>
<p>模块名 &#x3D; 模块给予当前路径的路径</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go mod edit -replace bnyte.com/greetings=../greetings</span><br></pre></td></tr></table></figure>

<ul>
<li>指定模块使用本地模块以及版本</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go mod tidy</span><br></pre></td></tr></table></figure>

<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><ul>
<li><p>抛出异常</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;errors&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  errors.New(<span class="string">&quot;empty name&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>打印异常并中断程序执行</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;errors&quot;</span></span><br><span class="line">  <span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  err := errors.New(<span class="string">&quot;empty name&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置预定义Logger的属性，包括</span></span><br><span class="line">  <span class="comment">// 日志条目前缀和禁用打印的标志</span></span><br><span class="line">  <span class="comment">//  时间、源文件和行号.</span></span><br><span class="line">  log.SetPrefix(<span class="string">&quot;greetings: &quot;</span>)</span><br><span class="line">  log.SetFlags(<span class="number">10</span>)</span><br><span class="line">  log.Fatal(err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><h3 id="操作-struct"><a href="#操作-struct" class="headerlink" title="操作 struct"></a>操作 struct</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Account <span class="keyword">struct</span> &#123;</span><br><span class="line">	Id   <span class="type">string</span> <span class="string">`json:&quot;id&quot;`</span></span><br><span class="line">	Name <span class="type">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// testMethod()</span></span><br><span class="line"></span><br><span class="line">	account := Account&#123;&#125;</span><br><span class="line">	typeOf := reflect.TypeOf(account)</span><br><span class="line">	<span class="comment">//align := typeOf.Align()</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; typeOf.NumField(); i++ &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;field&#x27; name is %s, type is %s, tag is %s\n&quot;</span>, typeOf.Field(i).Name, typeOf.Field(i).Type, typeOf.Field(i).Tag.Get(<span class="string">&quot;json&quot;</span>))</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="语法总结"><a href="#语法总结" class="headerlink" title="语法总结"></a>语法总结</h1><ul>
<li><p>不需要使用分号</p>
</li>
<li><p>在 go 中的名称具有语义效果，名称在包外的可见性取决于它的第一个字符是否大些。</p>
</li>
<li><p>导入包时，包名称成为内容的访问器如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">&quot;包名访问方式&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>导入包时同时可以指定别名:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;f fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  f.Println(<span class="string">&quot;包名访问方式&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 Go 中是不允许忽略<code>&#123;&#125;</code>(大括号)的，即使代码块中只有一行。</p>
</li>
</ul>
<h1 id="Go-总结"><a href="#Go-总结" class="headerlink" title="Go 总结"></a>Go 总结</h1><ul>
<li><p>在 Go 中<code>string</code>同样属于基本数据类型，使用这些类型的变量直接指向存在内存中的值, 通过<code>&amp;&#123;field_name&#125;</code>来获取到对象内存地址，与此同时值类型变量的值<code>存储在堆</code>中。</p>
</li>
<li><p>在 Go 通过<code>*&#123;field_name&#125;</code>来获取到内存所对应的值。</p>
</li>
</ul>
<h1 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h1><ul>
<li><p>在<code>Go</code>里面必须要配置的是<code>GOROOT</code>和<code>GOPATH</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GOROOT: go安装的根路径</span><br><span class="line">GOPATH: 暂时不知道作用是什么到时候补上</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h1><ul>
<li><a href="https://go.dev/">Golang</a></li>
<li><a href="https://www.jetbrains.com/">JetBrains</a></li>
</ul>
]]></content>
      <tags>
        <tag>学习</tag>
        <tag>连载</tag>
      </tags>
  </entry>
  <entry>
    <title>系统使用</title>
    <url>/2022/06/16/OsUsing/</url>
    <content><![CDATA[<p>本文主要连载一些系统包括<code>Windows</code>,<code>Linux</code>,<code>Mac</code>等系统日常使用中遇到或写的一些小脚本或者说一些使用技巧等等~</p>
<span id="more"></span>

<h1 id="Changelog"><a href="#Changelog" class="headerlink" title="Changelog"></a>Changelog</h1><h2 id="20220708"><a href="#20220708" class="headerlink" title="20220708"></a>20220708</h2><ul>
<li><a href="#SublimeText3%E8%BF%9E%E6%8E%A5SFTP">SublimeText3 连接 SFTP</a></li>
</ul>
<h2 id="20220708-之前"><a href="#20220708-之前" class="headerlink" title="20220708 之前"></a>20220708 之前</h2><ul>
<li><p><a href="#%E5%BE%AE%E4%BF%A1%E5%A4%9A%E5%BC%80">Windows 微信多开</a></p>
</li>
<li><p><a href="#%E7%A7%91%E5%AD%A6%E4%BD%BF%E7%94%A8Jetbrains">科学使用 Jetbrains</a></p>
</li>
</ul>
<h1 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h1><h2 id="微信多开"><a href="#微信多开" class="headerlink" title="微信多开"></a>微信多开</h2><ul>
<li><p>创建<code>.bat</code>可执行脚本文件。</p>
</li>
<li><p>找到<code>wechat.exe</code>的目标地址</p>
</li>
<li><p>键入如下脚本</p>
</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">TASKKILL /F /IM wechat.exe</span><br><span class="line"><span class="built_in">start</span> <span class="string">&quot;&quot;</span> <span class="string">&quot;D:\Tencent\WeChat\WeChat.exe&quot;</span> rem 需要多开的目标地址</span><br><span class="line"><span class="built_in">start</span> <span class="string">&quot;&quot;</span> <span class="string">&quot;D:\Tencent\WeChat\WeChat.exe&quot;</span> rem 需要多开的目标地址</span><br></pre></td></tr></table></figure>

<h1 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h1><h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h1 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h1><h2 id="SublimeText3-连接-SFTP"><a href="#SublimeText3-连接-SFTP" class="headerlink" title="SublimeText3 连接 SFTP"></a>SublimeText3 连接 SFTP</h2><ul>
<li><p>下载安装 Sublime text3</p>
</li>
<li><p>&#96;Ctrl+`&#96;打开控制台输入如下代码</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import urllib.request,os,hashlib; h = &#x27;2915d1851351e5ee549c20394736b442&#x27; + &#x27;8bc59f460fa1548d1514676163dafc88&#x27;; pf = &#x27;Package Control.sublime-package&#x27;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( &#x27;http://packagecontrol.io/&#x27; + pf.replace(&#x27; &#x27;, &#x27;%20&#x27;)).read(); dh = hashlib.sha256(by).hexdigest(); print(&#x27;Error validating download (got %s instead of %s), please try manual install&#x27; % (dh, h)) if dh != h else open(os.path.join( ipp, pf), &#x27;wb&#x27; ).write(by)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>Preferences -&gt; Browse Packages…..弹出目录后, 下载<a href="https://packagecontrol.io/Package%20Control.sublime-package">插件</a>或访问浏览器下载<code>https://packagecontrol.io/Package Control.sublime-package</code>, 下载完成之后直接将其复制到刚刚打开的文件当中重启</p>
</li>
<li><p><code>Ctrl+Shift+P</code>调出命令面板输入<code>install package</code>按回车等待弹出新的控制弹窗</p>
</li>
<li><p>在弹出的控制弹窗中输入<code>SFTP</code>回车等待下载完成</p>
</li>
<li><p>安装完成之后点击 <code>File -&gt; SFTP/FTP -&gt; MapToRemote 或者 Edit Server</code></p>
</li>
<li><p>自动生成一个 sftp-config.json 文件, 结合自己的情况配置就可以了</p>
</li>
</ul>
<h2 id="科学使用-Jetbrains"><a href="#科学使用-Jetbrains" class="headerlink" title="科学使用 Jetbrains"></a>科学使用 Jetbrains</h2><blockquote>
<p>下面的功能没有特殊标注则表明支持<code>jetbrains</code>家族下面的所有系列产品均可通用~</p>
</blockquote>
<h3 id="使用Reset插件重置"><a href="#使用Reset插件重置" class="headerlink" title="使用Reset插件重置"></a>使用<code>Reset</code>插件重置</h3><blockquote>
<p>仅支持 2021.3 以下 建议使用 2021.2.x 版本</p>
</blockquote>
<h3 id="下载-idea"><a href="#下载-idea" class="headerlink" title="下载 idea"></a>下载 idea</h3><blockquote>
<p><a href="https://download.jetbrains.com/idea/ideaIU-2021.2.2.exe?_gl=1*1c4chbw*_ga*MTA0ODE1ODkwNS4xNjM1NTkwMzE3*_ga_V0XZL7QHEB*MTY0ODM4OTgxNC40LjEuMTY0ODM4OTgyMC4w&_ga=2.223952603.1391899983.1648389815-1048158905.1635590317">点击下载 idea</a></p>
</blockquote>
<p>如果点击下载没有反应可以前往<a href="https://www.jetbrains.com/zh-cn/idea/download/other.html">官网</a>下载</p>
<p><img src="https://blogimg.bytestroll.com/blog_img/idea/1.png"></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul>
<li>卸载老版本</li>
</ul>
<p><img src="https://img.chajianxw.com/chajian/164604171691955"></p>
<p><img src="https://img.chajianxw.com/chajian/164604174406150"></p>
<p>安装就是无脑安装下一步(<code>next</code>)就可以了..没什么好说的</p>
<ul>
<li>开始安装</li>
</ul>
<p><img src="https://img.chajianxw.com/chajian/164604330408118"></p>
<p><img src="https://img.chajianxw.com/chajian/164604335389359"></p>
<p><img src="https://img.chajianxw.com/chajian/164604339538384"></p>
<p><img src="https://img.chajianxw.com/chajian/164604343562437"></p>
<p><img src="https://img.chajianxw.com/chajian/164604347765732"></p>
<blockquote>
<p>如果没有试用三十天请自行降低版本</p>
</blockquote>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul>
<li><p>安装完成之后打开</p>
</li>
<li><p>打开插件</p>
</li>
</ul>
<p><img src="https://blogimg.bytestroll.com/blog_img/idea/2.png"></p>
<ul>
<li>添加仓库插件仓库地址<code>plugins.zhile.io</code></li>
</ul>
<p><img src="https://blogimg.bytestroll.com/blog_img/idea/3.png"></p>
<ul>
<li>搜索插件<code>IDE Eval Reset</code></li>
</ul>
<p><img src="https://blogimg.bytestroll.com/blog_img/idea/4.png"></p>
<ul>
<li>开启<code>插件</code></li>
</ul>
<p><img src="https://blogimg.bytestroll.com/blog_img/idea/5.png"></p>
<blockquote>
<p>等待重启，成功，每次<code>重启</code>就会重新<code>刷新试用时间</code>了</p>
</blockquote>
<h1 id="Thanks"><a href="#Thanks" class="headerlink" title="Thanks"></a>Thanks</h1><ul>
<li>感谢<code>CSDN</code>用户<a href="https://blog.csdn.net/ZJ__ZFH">ZFH__ZJ</a></li>
</ul>
]]></content>
      <tags>
        <tag>连载</tag>
      </tags>
  </entry>
  <entry>
    <title>React的使用</title>
    <url>/2022/12/19/ReacttUsing/</url>
    <content><![CDATA[<p>一些 React 中的使用经验, 会持续连载</p>
<span id="more"></span>

<h1 id="脚手架"><a href="#脚手架" class="headerlink" title="脚手架"></a>脚手架</h1><h2 id="Create-React-App"><a href="#Create-React-App" class="headerlink" title="Create React App"></a>Create React App</h2><h3 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h3><p>控制台面板使用以下命令快速创建 React App</p>
<blockquote>
<p>TIPS: 请自行替换 <code>&lt;app-name&gt;</code> 的值</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn create react-app &lt;app-name&gt;</span><br><span class="line"><span class="built_in">cd</span> &lt;app-name&gt;</span><br><span class="line">yarn start</span><br></pre></td></tr></table></figure>

<p>访问: <code>http://127.0.0.1:3000</code> 或<a href="http://127.0.0.1:3000/">点击访问</a></p>
<h3 id="脚本参数"><a href="#脚本参数" class="headerlink" title="脚本参数"></a>脚本参数</h3><h4 id="模版"><a href="#模版" class="headerlink" title="模版"></a>模版</h4><h5 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h5><blockquote>
<p>参考 <a href="https://create-react-app.dev/docs/adding-typescript/">Create React App</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn create react-app &lt;app-name&gt; --template typescript</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
</search>
